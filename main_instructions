
# This file provides all instructions for predicting mutation edgotypes and calculating the fitness effect for different mutation edgotypes.

# All scripts run in Python 3

# Install all python modules listed in the file “dependencies” before running instructions below.

## All scripts and instructions below are set to perform calculations on the HuRI dataset and its structural interactome Y2H-SI. To repeat calculations on the literature-curated IntAct dataset, set the parameter <interactome_name> in all scripts to “IntAct”. Also replace the term "HuRI" in instructions below with the term "IntAct".

####################################################################################
				Instructions
####################################################################################

# Step 1: First construct the structural interactome by running instructions found in the repository: https://github.com/MohamedGhadie/build_structural_interactome

# Step 2: Now after constructing the structural interactome, replace the code folder in your project directory with the new code folder for mutation edgotype prediction found in the following repository: https://github.com/MohamedGhadie/edgotype_fitness_effect

# Step 3: Download, unzip and process disease-causing mutations from ClinVar
cd data/external
wget ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar//tab_delimited/variant_summary.txt.gz
gunzip variant_summary.txt.gz
cd ../../code
python3 process_clinvar_mutations.py

# Step 4: Download, unzip and process dbSNP flat files
cd ../data/external
mkdir dbsnp
cd dbsnp
# For <i> in [1-22,X,Y] run the following 7 command lines to process dbSNP files:
	1 - wget ftp://ftp.ncbi.nih.gov/snp//organisms/human_9606_b150_GRCh38p7/ASN1_flat/ds_flat_ch<i>.flat.gz
	2 - gunzip ds_flat_ch<i>.flat.gz
	3 - cd ../../../code
	4 - # set parameter ‘chr’ in script process_dbsnp_flatfile.py to <i> in string format
	5 - python3 process_dbsnp_flatfile.py
	6 - rm ds_flat_ch<i>.flat (optional to clear memory)
	7 - cd ../data/external/dbsnp

# Step 5: Filter, process and merge common non-disease mutations from dbSNP flat files
cd ../../../code
python3 process_dbsnp_mutations.py

# Step 6: Predict PPI edgetic perturbations and edgetic mutations using geometry
python3 predict_edgetic_mutations_geometry.py

# Step 7: Produce edgetic mutation structure maps for FoldX binding ∆∆G calculations
python3 produce_edgetic_mutation_structure_maps.py

# Step 8: Run FoldX binding ∆∆G calculations following instructions in file "instructions_for_FoldX_binding_ddg"

# Step 9: Predict PPI edgetic perturbations and edgetic mutations using physics (∆∆G)
python3 predict_edgetic_mutations_physics.py

# Step 10: Compare mutation binding ∆∆G
python3 analyze_binding_ddg.py

# Step 11: Produce empirically calculated residue maximum solvent accessibility
python3 produce_empirical_maxAcc.py

# Step 12: Calculate mutation residue RSA
python3 calculate_mutation_RSA.py

# Step 13: Compare mutation RSA with other residues
python3 compare_RSA.py

# Step 14: Calculate mutation distance to protein geometric centre
python3 calculate_mutation_dist_to_center.py

# Step 15: Compare mutations distance to centre with other residues
python3 compare_dist_to_center.py

# Step 16: Predict mutation locations on protein structure
python3 predict_mut_locations_on_structure.py

# Step 17: Produce mutation maps on single protein structures for FoldX folding ∆∆G calculations
python3 produce_mutation_structure_maps.py

# Step 18: Run FoldX folding ∆∆G calculations following instructions in file "instructions_for_FoldX_folding_ddg"

# Step 19: Plot distribution of change in protein stability (∆∆G) upon mutation
python3 plot_folding_ddg_distributions.py

# Step 20: Plot folding ∆∆G upon mutation versus mutation residue RSA
python3 analyze_folding_ddg_RSA.py

# Step 21: Plot folding ∆∆G upon mutation versus mutation residue distance to protein center
python3 analyze_folding_ddg_distToCenter.py

# Step 22: Predict non-edgetic mutations to be either quasi-null or quasi-wild-type
python3 predict_quasi-null_mutations.py

# Step 23: Calculate fitness effect for predicted mutation edgotypes
# Set parameter <edgotype> in script calculate_mut_FE.py to either "edgetic", "quasi-null", or "quasi-wild-type"
python3 calculate_mut_FE.py

# Step 24: Downlaod experimental edgotype dataset of Sahni et al. (2015)
cd ../data/external
wget https://ars.els-cdn.com/content/image/1-s2.0-S0092867415004304-mmc3.xlsx -O Sahni_2015_Table_S3.xlsx

# Step 25: Calculate fitness effect for mutations edgotypes obtained from experiments
# Set parameter <edgotype> in script calculate_mut_FE_experiment.py to either "edgetic", "quasi-null", or "quasi-wild-type"
cd ../../code
python3 calculate_mut_FE_experiment.py
