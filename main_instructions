
# This file provides all instructions for predicting mutation edgotypes and calculating the fitness effect for different mutation edgotypes.

# All scripts run in Python 3, except for produce_ppi_models.py and produce_protein_models.py which run in Python 2.

# Install all python modules listed in the file “dependencies” before running instructions below.

## All scripts and instructions below are set to perform calculations on the HuRI dataset and its structural interactome Y2H-SI. To repeat calculations on the literature-curated IntAct dataset, set the parameter <interactome_name> in all scripts to “IntAct”. Also replace the term "HuRI" in instructions below with the term "IntAct".

####################################################################################
				Instructions
####################################################################################

# create project directory
mkdir edgotype_fitness_effect

# create subdirectory for data files from external sources:
mkdir data
cd data
mkdir external
cd external

# Download and unzip UniProt human reference sequences:
wget ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/reference_proteomes//Eukaryota/UP000005640_9606.fasta.gz
gunzip UP000005640_9606.fasta.gz

# Download and unzip UniProt ID mapping table:
wget ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/idmapping//by_organism/HUMAN_9606_idmapping.dat.gz
gunzip HUMAN_9606_idmapping.dat.gz

# Download UniProt reviewed human proteome list:
wget 'http://www.uniprot.org/uniprot/?sort=&desc=&compress=no&query=&fil=reviewed:yes%20AND%20organism:%22Homo%20sapiens%20(Human)%20[9606]%22%20AND%20proteome:up000005640&format=list&force=yes' -O uniprot_reviewed_human_proteome.list

# Download RefSeqGene mapping:
wget ftp://ftp.ncbi.nlm.nih.gov/refseq/H_sapiens/RefSeqGene/LRG_RefSeqGene

# Download and unzip PDB chain sequences and structured residue labels:
wget ftp://ftp.wwpdb.org/pub/pdb/derived_data/pdb_seqres.txt
wget https://cdn.rcsb.org/etl/kabschSander/ss_dis.txt.gz
gunzip ss_dis.txt.gz

# Download the HuRI human protein-protein interaction dataset:
wget http://www.interactome-atlas.org/data/HuRI.tsv

# Download and extract IntAct protein-protein interaction dataset:
wget ftp://ftp.ebi.ac.uk/pub/databases/intact/current/psimitab/intact.zip
unzip intact.zip
rm intact.zip intact_negative.txt

# Downlaod experimental edgotype dataset of Sahni et al. (2015):
wget https://ars.els-cdn.com/content/image/1-s2.0-S0092867415004304-mmc3.xlsx -O Sahni_2015_Table_S3.xlsx

# Process data files from external sources:
cd ../../code
python3 process_external_data.py

# Process reference interactome dataset:
python3 process_interactome.py

# BLAST interactome protein sequences against PDB SEQRES sequences:
cd ../data/processed/HuRI
cp interactome_sequences.fasta ../
cd ../
makeblastdb -in pdb_seqres_reduced.fasta -dbtype prot -out pdb_seqres_db
blastp -db pdb_seqres_db -query interactome_sequences.fasta -out interactome_pdb_e-5 -evalue 1e-5
cp interactome_pdb_e-5 /HuRI

# Produce template-annotated interactome:
cd ../../code
python3 produce_template_annotated_interactome.py

# Download, unzip and process RefSeq protein transcript sequence files:
cd ../data/external
mkdir RefSeq
cd RefSeq
wget ftp://ftp.ncbi.nlm.nih.gov/refseq//H_sapiens/mRNA_Prot/human.*.protein.faa.gz
gunzip human.*.protein.faa.gz
cd ../../../code
python3 process_refseq_files.py

# Download, unzip and process disease-causing mutations from ClinVar:
cd ../data/external
wget ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar//tab_delimited/variant_summary.txt.gz
gunzip variant_summary.txt.gz
cd ../../code
python3 process_clinvar_mutations.py

# Download, unzip and process dbSNP flat files:
cd ../data/external
mkdir dbsnp
cd dbsnp
# For <i> in [1-22,X,Y] run the following 7 command lines to process dbSNP files:
	1 - wget ftp://ftp.ncbi.nih.gov/snp//organisms/human_9606_b150_GRCh38p7/ASN1_flat/ds_flat_ch<i>.flat.gz
	2 - gunzip ds_flat_ch<i>.flat.gz
	3 - cd ../../../code
	4 - # set parameter ‘chr’ in script process_dbsnp_flatfile.py to <i> in string format
	5 - python3 process_dbsnp_flatfile.py
	6 - rm ds_flat_ch<i>.flat (optional to clear memory)
	7 - cd ../data/external/dbsnp

# Filter, process and merge common non-disease mutations from dbSNP flat files:
cd ../../../code
python3 process_dbsnp_mutations.py

# Produce PPI template files for PPI homology modelling:
python3 produce_ppi_template_files.py

# Blast again this time against PDB chain residues that have 3D coordinates:
cd ../data/processed/HuRI/model_based
makeblastdb -in ppi_template_sequences.fasta -dbtype prot -out ppi_template_seq_db
blastp -db ppi_template_seq_db -query protein_sequences.fasta -out ppi_template_blast_alignments_e100 -evalue 100 -max_hsps 1 -num_alignments 1000

# Produce PPI alignment files for PPI homology modelling:
cd ../../../../code
python3 produce_ppi_alignment_files.py

# Produce PPI structural models:
cd ../data/processed/HuRI/model_based
mkdir ppi_models
cd ppi_models
python2 ../../../../../code/produce_ppi_models.py

# Rename PPI structural model files:
# Set parameter <modelType> in script rename_models.py to "ppi_models"
cd ../../../../../code
python3 rename_models.py

# Produce structural interactome:
python3 produce_structural_interactome.py

# At this point, the structural interactome with mapped PPI interfaces can be found in the file /data/processed/HuRI/model_based/structural_interactome.txt

# Predict PPI edgetic perturbations and edgetic mutations using geometry:
python3 predict_edgetic_mutations_geometry.py

# Produce edgetic mutation structure maps for FoldX binding ∆∆G calculations:
python3 produce_edgetic_mutation_structure_maps.py

# Run FoldX binding ∆∆G calculations following instructions in file ‘instructions_for_FoldX_binding_ddg’

# Compare mutation binding ∆∆G:
python3 analyze_binding_ddg.py

# Predict PPI edgetic perturbations and edgetic mutations using physics (∆∆G):
python3 predict_edgetic_mutations_physics.py

# Assign a single chain template to each protein:
python3 assign_protein_single_templates.py

# Produce protein template files for single protein homology modelling:
python3 produce_protein_template_files.py

# Blast against PDB chain residues that have 3D coordinates:
cd ../data/processed/HuRI/model_based
makeblastdb -in protein_template_sequences.fasta -dbtype prot -out protein_template_seq_db
blastp -db protein_template_seq_db -query protein_sequences.fasta -out protein_template_blast_alignments_e100 -evalue 100 -max_hsps 1 -num_alignments 1000

# Produce protein alignment files for single protein homology modelling:
cd ../../../../code
python3 produce_protein_alignment_files.py

# Produce protein structural models:
cd ../data/processed/HuRI/model_based
mkdir protein_models
cd protein_models
python2 ../../../../../code/produce_protein_models.py

# Rename protein structural model files:
# Set parameter <modelType> in script rename_models.py to "protein_models"
cd ../../../../../code
python3 rename_models.py

# Produce protein full model mapping data required for further structural calculations:
python3 produce_protein_model_mappings.py

# Produce empirically calculated residue maximum solvent accessibility:
python3 produce_empirical_maxAcc.py

# Calculate mutation residue RSA:
python3 calculate_mutation_RSA.py

# Compare mutation RSA with other residues:
python3 compare_RSA.py

# Calculate mutation distance to protein geometric centre:
python3 calculate_mutation_dist_to_center.py

# Compare mutations distance to centre with other residues:
python3 compare_dist_to_center.py

# Predict mutation locations on protein structure:
python3 predict_mut_locations_on_structure.py

# Produce mutation maps on single protein structures for FoldX folding ∆∆G calculations:
python3 produce_mutation_structure_maps.py

# Run FoldX folding ∆∆G calculations following instructions in file ‘instructions_for_FoldX_folding_ddg’

# Plot distribution of change in protein stability (∆∆G) upon mutation:
python3 plot_folding_ddg_distributions.py

# Plot folding ∆∆G upon mutation versus mutation residue RSA:
python3 analyze_folding_ddg_RSA.py

# Plot folding ∆∆G upon mutation versus mutation residue distance to protein center:
python3 analyze_folding_ddg_distToCenter.py

# Predict non-edgetic mutations to be either quasi-null or quasi-wild-type:
python3 predict_quasi-null_mutations.py

# Calculate fitness effect for predicted mutation edgotypes:
# Set parameter <edgotype> in script calculate_mut_FE.py to either "edgetic", "quasi-null", or "quasi-wild-type"
python3 calculate_mut_FE.py

# Calculate fitness effect for mutations edgotypes obtained from experiments:
# Set parameter <edgotype> in script calculate_mut_FE_experiment.py to either "edgetic", "quasi-null", or "quasi-wild-type"
python3 calculate_mut_FE_experiment.py
